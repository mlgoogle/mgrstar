$prefix-for-webkit: true !default;
$prefix-for-mozilla: true !default;
$prefix-for-microsoft: false !default;
$prefix-for-opera: false !default;
$prefix-for-spec: true !default; // required for keyframe mixin

@mixin radiusImg($rectWidth: 50px, $left: 0, $top: 0) {
    width: $rectWidth;
    height: $rectWidth;
    border-radius: 50%;
    position: absolute;
    left: $left;
    top: $top;
}

@mixin loadIcon($size: 40px, $color: #3498db, $borderSize: 3px, $dur: 1.5s) {
    position: relative;
    top: 50%;
    left: 50%;
    box-sizing: border-box;
    margin-left: -$size / 2;
    margin-top: -$size / 2;
    width: $size;
    height: $size;
    border: $borderSize solid $color;
    border-bottom-color: transparent;
    border-radius: 50%;
    animation: load $dur linear infinite;
    -webkit-animation: load $dur linear infinite;
    @keyframes load
    {
        from {transform: rotate(0);}
        to {transform: rotate(360deg);}
    }

    @-webkit-keyframes load /* Safari 与 Chrome */
    {
        from {transform: rotate(0);}
        to {transform: rotate(360deg);}
    }
}

@mixin button($height: 24px, $block:block, $color: #ffffff, $backgroundColor: #55abed, $padding: 0 20px) {
    height: $height;
    line-height: $height;
    display: $block;
    text-align: center;
    color: $color;
    border-radius: 4px;
    padding: $padding;
    background: $backgroundColor;
    transition: .2s;
    //@if $backgroundColor == #55abed {
    //    &:hover {
    //        background-color: #ee4133;
    //    }
    //}
    //
    //@if $backgroundColor == #ffffff {
    //    &:hover {
    //        background-color: #FF5144;
    //        color: #fff;
    //    }
    //}

}

@mixin arrows($arrow_color:#ccc, $arrow_size:1.0, $arrow_direction:45deg ) {
    position: absolute;
    padding-right: 15px;
    width: 100%;
    box-sizing: border-box;
    top: 20px;
    &::after {
        position: absolute;
        right: 10px;
        top: 50%;
        display: block;
        content: '';
        width: 10px;
        height: 10px;
        border-left: 2px solid $arrow_color;
        border-bottom: 2px solid $arrow_color;
        -webkit-transform: translateY(-50%) scale($arrow_size) rotateZ($arrow_direction);
        -moz-transform: translateY(-50%) scale($arrow_size) rotateZ($arrow_direction);
        -ms-transform: translateY(-50%) scale($arrow_size) rotateZ($arrow_direction)
    }
}

// 放大镜图标
@mixin search($color: #c4c5c5, $size: 26px) {
    position: relative;
    display: block;
    width: $size;
    height: $size;
    &:before, &:after {
        content: "";
        position: absolute;
        left: 0;
        background: transparent;
    }
    &::after {
        left: 56%;
        top: 65%;
        width: 36%;
        height: 9%;
        background: $color;
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
        -moz-transform: rotate(45deg);
        -o-transform: rotate(45deg);
    }
    &::before {
        left: 10%;
        top: 5%;
        width: 50%;
        height: 50%;
        border: 2px solid $color;
        border-radius: 50%;
        -webkit-border-radius: 50%;
        -moz-border-radius: 50%;
        --o-border-radius: 50%;
    }
    //&:hover::before {
    //    border-color: #ff7;
    //}
    //&:hover::after {
    //    background: #ff7;
    //}
}

@mixin checkbox($hook_width:10px, $hook_height:6px, $hook_border_width:1px, $hook_border_color:#FFF, $box_width:16px, $box_height:16px, $box_radius:0px, $box_border_width:1px, $box_border_color:lightgreen, $box_background_color:lightgreen ) {
    position: relative;
    width: $box_width - 2 * $box_border_width;
    height: $box_height - 2 * $box_border_width;
    display: inline-block;
    background: transparent;
    cursor: pointer;
    -webkit-appearance: none;
    //box-sizing:border-box;
    border: {
        color: $box_border_color;
        width: $box_border_width;
        style: solid;
        radius: $box_radius;
    }
    &::before {
        //box-sizing:border-box;
        display: table;
        width: 100%;
        height: 100%;
        content: ' ';
        -webkit-transition: background-color 20ms ease-in-out;
        transition: background-color 20ms ease-in-out;
        background: #FFF;
    }
    &::after {
        //box-sizing:border-box;
        -webkit-transition: opacity 0.05s ease-in-out;
        transition: opacity 0.2s ease-in-out;
        -webkit-transform: rotate(-50deg);
        transform: rotate(-50deg);
        position: absolute;
        top: 15%;
        left: 15%;
        display: table;
        width: $hook_width - 2 * $box_border_width;
        height: $hook_height - 2 * $box_border_width;
        border: $hook_border_width solid $hook_border_color;
        border-top: 0;
        border-right: 0;
        content: ' ';
        opacity: 0;
    }
    &:checked {
        opacity: 1;
        &::before {
            background: $box_background_color;
            opacity: 1;
        }
        &::after {
            opacity: 1;
        }
    }
}

@mixin caret($position, $caret-width, $border-width, $direction, $border-color, $background-color) {
    position: $position;
    &:before, &:after {
        content: " ";
        position: absolute;
    }
    @if $direction == top {
        &:before {
            top: 0;
            left: 0;
            border-bottom: $caret-width solid $border-color;
            border-left: $caret-width solid transparent;
            border-right: $caret-width solid transparent;
        }
        &:after {
            left: $border-width;
            top: $border-width;
            border-bottom: ($caret-width - $border-width) solid $background-color;
            border-left: ($caret-width - $border-width) solid transparent;
            border-right: ($caret-width - $border-width) solid transparent;
        }
    } @else if $direction == right {
        &:before {
            top: 0;
            left: 0;
            border-left: $caret-width solid $border-color;
            border-top: $caret-width solid transparent;
            border-bottom: $caret-width solid transparent;
        }
        &:after {
            left: 0;
            top: $border-width;
            border-left: ($caret-width - $border-width) solid $background-color;
            border-top: ($caret-width - $border-width) solid transparent;
            border-bottom: ($caret-width - $border-width) solid transparent;
        }
    } @else if $direction == bottom {
        &:before {
            top: 0;
            left: 0;
            border-top: $caret-width solid $border-color;
            border-left: $caret-width solid transparent;
            border-right: $caret-width solid transparent;
        }
        &:after {
            left: $border-width;
            top: 0;
            border-top: ($caret-width - $border-width) solid $background-color;
            border-left: ($caret-width - $border-width) solid transparent;
            border-right: ($caret-width - $border-width) solid transparent;
        }
    } @else if $direction == left {
        &:before {
            top: 0;
            left: 0;
            border-right: $caret-width solid $border-color;
            border-top: $caret-width solid transparent;
            border-bottom: $caret-width solid transparent;
        }
        &:after {
            left: $border-width;
            top: $border-width;
            border-right: ($caret-width - $border-width) solid $background-color;
            border-top: ($caret-width - $border-width) solid transparent;
            border-bottom: ($caret-width - $border-width) solid transparent;
        }
    }
}

@mixin moreline-ellipsis($lineHeight: 20px, $lines: 2, $r: 255, $g: 255, $b: 255, $endColor: rgba(255,255,255,1)) {
    position: relative;
    line-height: $lineHeight;
    height: $lineHeight * $lines;
    overflow: hidden;
    &::after {
        content: "";
        font-weight: bold;
        position: absolute;
        background: linear-gradient(to right, rgba($r, $g, $b, 0), $endColor 90%);
        width: 40%;
        height: $lineHeight;
        bottom: 0;
        right: 0;
    }
}

@mixin singleline-ellipsis($substract:0) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: 100% - $substract;
}

@mixin disable-prefix-for-all() {
    $prefix-for-webkit: false !global;
    $prefix-for-mozilla: false !global;
    $prefix-for-microsoft: false !global;
    $prefix-for-opera: false !global;
    $prefix-for-spec: false !global;
}

@mixin keyframes($name) {
    $original-prefix-for-webkit: $prefix-for-webkit;
    $original-prefix-for-mozilla: $prefix-for-mozilla;
    $original-prefix-for-microsoft: $prefix-for-microsoft;
    $original-prefix-for-opera: $prefix-for-opera;
    $original-prefix-for-spec: $prefix-for-spec;

    @if $original-prefix-for-webkit {
        @include disable-prefix-for-all();
        $prefix-for-webkit: true !global;
        @-webkit-keyframes #{$name} {
            @content;
        }
    }

    @if $original-prefix-for-mozilla {
        @include disable-prefix-for-all();
        $prefix-for-mozilla: true !global;
        @-moz-keyframes #{$name} {
            @content;
        }
    }

    $prefix-for-webkit: $original-prefix-for-webkit !global;
    $prefix-for-mozilla: $original-prefix-for-mozilla !global;
    $prefix-for-microsoft: $original-prefix-for-microsoft !global;
    $prefix-for-opera: $original-prefix-for-opera !global;
    $prefix-for-spec: $original-prefix-for-spec !global;

    @if $original-prefix-for-spec {
        @keyframes #{$name} {
            @content;
        }
    }
}

//prefixer
@mixin prefixer($property, $value, $prefixes) {
    @each $prefix in $prefixes {

        @if $prefix == webkit and $prefix-for-webkit == true {
            -webkit-#{$property}: $value;
        } @else if $prefix == moz and $prefix-for-mozilla == true {
            -moz-#{$property}: $value;
        } @else if $prefix == ms and $prefix-for-microsoft == true {
            -ms-#{$property}: $value;
        } @else if $prefix == o and $prefix-for-opera == true {
            -o-#{$property}: $value;
        } @else if $prefix == spec and $prefix-for-spec == true {
            #{$property}: $value;
        } @else {
            @warn "Unrecognized prefix: #{$prefix}";
        }
    }
}

@mixin transform($property: none) {
    // none | <transform-function>
    @include prefixer(transform, $property, webkit moz ms o spec);
}

@mixin transform-origin($axes: 50%) {
    // x-axis - left | center | right  | length | %
    // y-axis - top  | center | bottom | length | %
    // z-axis -                          length
    @include prefixer(transform-origin, $axes, webkit moz ms o spec);
}

@mixin transform-style($style: flat) {
    @include prefixer(transform-style, $style, webkit moz ms o spec);
}

%overflow-touch {
    overflow-x: hidden;
    overflow-y: scroll;
    -webkit-overflow-scrolling: touch;
}

%singleline-ellipsis {
    @include singleline-ellipsis;
}

%clearfix {
    zoom: 1;
    &:after {
        content: '';
        display: block;
        clear: both;
    }
}

@function px2rem($px) {
    $rem: 37.5px;
    @return ($px/$rem) + rem;
}

@function half-of($px) {
    @return ($px / 2);
}